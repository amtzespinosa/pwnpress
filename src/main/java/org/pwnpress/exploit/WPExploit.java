package org.pwnpress.exploit;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

import org.pwnpress.framework.WPFramework;
import org.pwnpress.framework.WPFrameworkSettings;

public class WPExploit {
	
    public static void exploit() throws IOException {
        Scanner scanner = new Scanner(System.in);
        // printHelp();

        while (true) {
        	System.out.print("\nPwnPress (exploit) > ");
            String command = scanner.nextLine();

            if (command.equalsIgnoreCase("exit")) {
                System.out.println("Exiting PwnPress Framework. Goodbye and Happy Hacking!");
                scanner.close();
                System.exit(0);
            } else if (command.equalsIgnoreCase("back")) {
                WPFramework.framework();
                // break;
            } else if (command.toLowerCase().startsWith("search ")) {
            	// Extract search terms from command and call SearchExploit.search
                String[] parts = command.split("\\s+", 2); // Split only once to capture the command and the rest as one string
                String searchTerm = parts[1];
                String[] searchTerms = searchTerm.split("\\s+"); // Split the search term into individual terms
                SearchExploit.search(searchTerms);
            } else if (command.equalsIgnoreCase("load")) {
            	
            } else if (command.equalsIgnoreCase("run")) {
            
            /*
            } else if (command.toLowerCase().startsWith("autopwn")) {
            	String url = null;
        		String cve = null;
                String[] parts = command.split("\\s+");
                if (parts.length == 1 && url == null) {
                    System.out.println("Usage: autopwn <url> <CVE-XXXX-XXXXX or -a (all)>");
                    System.out.println("You can also set a constant <url> in settings.");
                } else if (parts.length == 2 && url == null) {
                    System.out.println("Usage: autopwn <url> <CVE-XXXX-XXXXX or -a (all)>");
                    System.out.println("You can also set a constant <url> in settings.");
                } else if (parts.length == 2 && url != null) {
                    cve = parts[1];
                    AutoPwn.execute(url, cve);
                } else if (parts.length == 3) {
                    url = parts[1];
                    cve = parts[2];
                    AutoPwn.execute(url, cve);
                } else {
                    System.out.println("Usage: autopwn <CVE-XXXX-XXXXX or -a (all)>");
                } 
            */
            } else if (command.toLowerCase().startsWith("request ")) {
                String[] parts = command.split("\\s+");
                if (parts.length < 3) {
                    System.out.println("Invalid command format. Usage: request GET/POST <url> [-data] [-headers key1:value1 key2:value2 ...] [-content-type contentType]");
                    return;
                }

                String method = parts[1].toUpperCase();
                String url = null;
                String data = null;
                Map<String, String> headers = new HashMap<>();
                String contentType = null;

                if (parts.length >= 3) url = parts[2];
                if (parts.length >= 4 && parts[3].startsWith("-")) data = parts[3].substring(1); // Remove the leading '-'

                // Parse optional parameters
                for (int i = 4; i < parts.length; i++) {
                    String arg = parts[i];
                    if (arg.startsWith("-")) {
                        if (arg.equalsIgnoreCase("-data")) {
                            if (i + 1 < parts.length) {
                                data = parts[i + 1];
                                i++; // Skip the next part as it's the data value
                            } else {
                                System.out.println("Missing value for -data parameter.");
                                return;
                            }
                        } else if (arg.equalsIgnoreCase("-headers")) {
                            // Parse headers
                            i++;
                            while (i < parts.length && !parts[i].startsWith("-")) {
                                String header = parts[i];
                                String[] headerParts = header.split(":");
                                if (headerParts.length == 2) {
                                    headers.put(headerParts[0], headerParts[1]);
                                } else {
                                    System.out.println("Invalid header format: " + header + ". Expected key:value.");
                                    return;
                                }
                                i++;
                            }
                            i--; // Adjust index because the loop will increment it
                        } else if (arg.equalsIgnoreCase("-content-type")) {
                            if (i + 1 < parts.length) {
                                contentType = parts[i + 1];
                                i++; // Skip the next part as it's the content type value
                            } else {
                                System.out.println("Missing value for -content-type parameter.");
                                return;
                            }
                        } else {
                            System.out.println("Unknown option: " + arg);
                            return;
                        }
                    }
                }

                // Validate and execute request
                if (method.equals("GET")) {
                    System.out.println(CustomRequestSender.sendGetRequest(url));
                } else if (method.equals("POST")) {
                    if (data == null) {
                        System.out.println("POST data is required for the POST method.");
                        return;
                    }
                    try {
                        String response = CustomRequestSender.sendCustomPostRequest(method, url, data, contentType, headers);
                        System.out.println("Response:\n" + response);
                    } catch (IOException e) {
                        System.err.println("Error sending POST request: " + e.getMessage());
                    }
                } else {
                    System.out.println("Unsupported HTTP method. Please use GET or POST.");
                }
            } else if (command.equalsIgnoreCase("external tools")) {
                ExternalExploitationTools.tools();
            } else if (command.equalsIgnoreCase("help")) {
                printHelp();
            } else {
                System.out.println("\nUnknown command. Type 'help' for available commands.");
            }
        }

        // scanner.close();
    }

    private static void printHelp() {
        System.out.println("\nAvailable exploitation:\n");
        System.out.println("  search               - Search exploitation modules.");
        System.out.println("  load                 - Load exploitation modules.");
        System.out.println("  run                  - Run exploitation module.");
        System.out.println();
        System.out.println("  request              - Send a custom HTTP request to the server.");
        // System.out.println("  autopwn              - Automatically exploit found vulnerabilities while scanning.");
        System.out.println();
        System.out.println("  external tools       - Connect PwnPress Framework with external tools to enhance exploitation (Linux only).");
        System.out.println("  back");
        System.out.println("  exit");
    }
}
