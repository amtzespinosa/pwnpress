package org.pwnpress.exploit;

import java.util.Scanner;

import org.pwnpress.framework.WPFramework;
import org.pwnpress.framework.WPFrameworkSettings;

public class WPExploit {
	
    public static void exploit() {
        Scanner scanner = new Scanner(System.in);
        // printHelp();
        
        String url = null;
        if (WPFrameworkSettings.getConstantUrl() != null) {
        	url = WPFrameworkSettings.getConstantUrl();
        }
        String cve = null;

        while (true) {
        	System.out.print("\nPwnPress (exploit) > ");
            String command = scanner.nextLine();

            if (command.equalsIgnoreCase("exit")) {
                System.out.println("Exiting PwnPress Framework. Goodbye and Happy Hacking!");
                scanner.close();
                System.exit(0);
            } else if (command.equalsIgnoreCase("back")) {
                WPFramework.framework();
                // break;
            } else if (command.toLowerCase().startsWith("search ")) {
            	// Extract search terms from command and call SearchExploit.search
                String[] parts = command.split("\\s+", 2); // Split only once to capture the command and the rest as one string
                String searchTerm = parts[1];
                String[] searchTerms = searchTerm.split("\\s+"); // Split the search term into individual terms
                SearchExploit.search(searchTerms);
            } else if (command.equalsIgnoreCase("load")) {
            	
            } else if (command.equalsIgnoreCase("run")) {
            	
            } else if (command.toLowerCase().startsWith("autopwn")) {
                String[] parts = command.split("\\s+");
                if (parts.length == 1 && url == null) {
                    System.out.println("Usage: autopwn <url> <CVE-XXXX-XXXXX> or <-a (all)>");
                    System.out.println("You can also set a constant <url> in settings.");
                } else if (parts.length == 2 && url == null) {
                    System.out.println("Usage: autopwn <url> <CVE-XXXX-XXXXX or -a (all)>");
                    System.out.println("You can also set a constant <url> in settings.");
                } else if (parts.length == 2 && url != null) {
                    cve = parts[1];
                    AutoPwn.execute(url, cve);
                } else if (parts.length == 3) {
                    url = parts[1];
                    cve = parts[2];
                    AutoPwn.execute(url, cve);
                } else {
                    System.out.println("Usage: autopwn <CVE-XXXX-XXXXX or -a (all)>");
                }
            } else if (command.equalsIgnoreCase("external tools")) {
                ExternalExploitationTools.tools();
            } else if (command.equalsIgnoreCase("help")) {
                printHelp();
            } else {
                System.out.println("\nUnknown command. Type 'help' for available commands.");
            }
        }

        // scanner.close();
    }

    private static void printHelp() {
        System.out.println("\nAvailable exploitation:\n");
        System.out.println("  search               - Search exploitation modules.");
        System.out.println("  load                 - Load exploitation modules.");
        System.out.println("  run                  - Run exploitation module.");
        System.out.println();
        System.out.println("  autopwn              - Automatically exploit found vulnerabilities while scanning.");
        System.out.println();
        System.out.println("  external tools       - Connect PwnPress Framework with external tools to enhance exploitation (Linux only).");
        System.out.println("  back");
        System.out.println("  exit");
    }
}
