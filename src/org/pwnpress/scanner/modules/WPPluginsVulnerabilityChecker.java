package org.pwnpress.scanner.modules;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.pwnpress.framework.WPFrameworkSettings;
import org.pwnpress.utils.CustomFormat;

public class WPPluginsVulnerabilityChecker {

    public static void checkPluginVulnerabilities(String url) {
        String feed = WPFrameworkSettings.getFeed();
        String apiUrl = "https://www.wordfence.com/api/intelligence/v2/vulnerabilities/" + feed;

        List<Map<String, String>> foundPlugins = WPPluginScanner.getFoundPlugins(); // Retrieve found plugins from WPPluginScanner

        System.out.println("\n[+] Found plugin vulnerabilities:");
        
        try {
            URL urlObj = new URL(apiUrl);
            HttpURLConnection connection = (HttpURLConnection) urlObj.openConnection();
            connection.setRequestMethod("GET");

            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                StringBuilder response = new StringBuilder();
                String inputLine;
                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
                in.close();

                JSONObject jsonObject = new JSONObject(response.toString());
                parseAndPrintVulnerabilities(jsonObject, foundPlugins);
            } else {
                System.out.println("Failed to retrieve data. Response code: " + responseCode);
            }
        } catch (IOException | JSONException e) {
            e.printStackTrace();
        }
    }

    private static void parseAndPrintVulnerabilities(JSONObject jsonObject, List<Map<String, String>> foundPlugins) {
        boolean foundVulnerabilities = false;

        try {
            for (Map<String, String> pluginInfo : foundPlugins) {
                String pluginSlug = pluginInfo.get("slug");
                String pluginVersion = pluginInfo.get("version");
                
                System.out.println("\n[+] Vulnerabilities for "+pluginInfo.get("slug")+" "+pluginInfo.get("version"));
                System.out.println(" |");

                for (String key : jsonObject.keySet()) {
                    JSONObject vulnerability = jsonObject.getJSONObject(key);
                    JSONArray softwareArray = vulnerability.getJSONArray("software");

                    for (int i = 0; i < softwareArray.length(); i++) {
                        JSONObject software = softwareArray.getJSONObject(i);

                        if (software.getString("type").equals("plugin") && software.getString("slug").equals(pluginSlug)) {
                            JSONObject affectedVersions = software.getJSONObject("affected_versions");

                            for (String versionRange : affectedVersions.keySet()) {
                                String[] versions = versionRange.split(" - ");
                                String fromVersion = versions[0];
                                String toVersion = versions.length > 1 ? versions[1] : versions[0];

                                if (isVersionInRange(pluginVersion, fromVersion, toVersion)) {
                                    foundVulnerabilities = true;
                                    System.out.println(CustomFormat.padRight(" |- Plugin:", 20) + pluginSlug);
                                    System.out.println(CustomFormat.padRight(" |- Version:", 20) + pluginVersion);
                                    System.out.println(CustomFormat.padRight(" |- Title:", 20) + vulnerability.getString("title"));
                                    System.out.println(CustomFormat.padRight(" |- References:", 20) + joinJSONArray(vulnerability.getJSONArray("references"), ", "));
                                    System.out.println(CustomFormat.padRight(" |- CVE:", 20) + vulnerability.optString("cve", "N/A"));
                                    JSONObject cvss = vulnerability.optJSONObject("cvss");
                                    String score = cvss != null ? cvss.optString("score", "N/A") : "N/A";
                                    String rating = cvss != null ? cvss.optString("rating", "N/A") : "N/A";
                                    String color = CustomFormat.getColorForRating(rating);
                                    System.out.println(CustomFormat.padRight(" |- Score:", 20) + score);
                                    System.out.println(CustomFormat.padRight(" |- Rating:", 20) + color + rating + CustomFormat.resetColor());
                                    System.out.println(CustomFormat.padRight(" |- Published:", 20) + vulnerability.optString("published", "N/A"));
                                    System.out.println(CustomFormat.padRight(" |- Updated:", 20) + vulnerability.optString("updated", "N/A"));
                                    System.out.println(" |------------------------------------------------------------------------------");
                                }
                            }
                        }
                        
                    }
                }
            }

            if (!foundVulnerabilities) {
                System.out.println(" |- No vulnerabilities found in plugins.");
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    private static boolean isVersionInRange(String version, String fromVersion, String toVersion) {
        if (fromVersion.equals("*") && version.compareTo(toVersion) <= 0) {
            return true;
        } else if (toVersion.equals("*") && version.compareTo(fromVersion) >= 0) {
            return true;
        } else {
            return version.compareTo(fromVersion) >= 0 && version.compareTo(toVersion) <= 0;
        }
    }

    private static String joinJSONArray(JSONArray array, String delimiter) throws JSONException {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < array.length(); i++) {
            if (i > 0) {
                sb.append(delimiter);
            }
            sb.append(array.getString(i));
        }
        return sb.toString();
    }
}
